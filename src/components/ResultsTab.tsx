"use client";
import { motion } from 'framer-motion'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { Separator } from '@/components/ui/separator'
import { Progress } from '@/components/ui/progress'
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LineChart, Line, PieChart, Pie, Cell } from 'recharts'
import { TrendingUp, Download, Share2, Trophy, Target, Users, Activity } from 'lucide-react'
import { useSimStore } from '@/state/useSimStore'

const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8', '#82CA9D', '#FFC658', '#FF7C7C', '#8DD1E1']

export function ResultsTab() {
  const { results } = useSimStore()
  
  const exportToCSV = () => {
    if (!hasResults || !latestResult) return
    
    const csvData = []
    
    // Add header
    csvData.push(['Strategy', 'Score', 'Cooperation Rate', 'Trust', 'Trust Life', 'Blacklisted'])
    
    // Add strategy data
    if (latestResult.roundResults[0]?.leaderboard) {
      latestResult.roundResults[0].leaderboard.forEach(player => {
        csvData.push([
          `${player.label || player.strategy} (${player.id})`,
          player.score,
          'N/A', // Cooperation rate would need to be calculated from match data
          player.trust,
          player.trustLife,
          'No' // blacklisted info not available in leaderboard
        ])
      })
    }
    
    // Add match results if available
    if (latestResult.matches && latestResult.matches.length > 0) {
      csvData.push([]) // Empty row
      csvData.push(['Match Results'])
      csvData.push(['Player A', 'Player B', 'Rounds', 'Score A', 'Score B', 'Cooperation Rate'])
      
      latestResult.matches.forEach(match => {
        csvData.push([
          match.a,
          match.b,
          match.rounds,
          match.scoreA,
          match.scoreB,
          (match.coopRate * 100).toFixed(1) + '%'
        ])
      })
    }
    
    // Convert to CSV string
    const csvContent = csvData.map(row => row.join(',')).join('\n')
    
    // Create and download file
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' })
    const link = document.createElement('a')
    const url = URL.createObjectURL(blob)
    link.setAttribute('href', url)
    link.setAttribute('download', `simulation-results-${new Date().toISOString().slice(0, 10)}.csv`)
    link.style.visibility = 'hidden'
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
  }
  
  const shareResults = async () => {
    if (!hasResults || !latestResult) return
    
    const shareData = {
      title: 'Game-Theoretic Leader Election Results',
      text: `Simulation Results:\n\nWinner: ${processedResults.winner} (${processedResults.winnerScore} pts)\nRunner-up: ${processedResults.runnerUp} (${processedResults.runnerUpScore} pts)\nCooperation Rate: ${(processedResults.cooperationRate * 100).toFixed(1)}%\nTotal Rounds: ${processedResults.totalRounds}\n\nGenerated by Game-Theoretic Leader Election Simulator`,
      url: window.location.href
    }
    
    try {
      if (navigator.share && navigator.canShare(shareData)) {
        await navigator.share(shareData)
      } else {
        // Fallback: copy to clipboard
        await navigator.clipboard.writeText(`${shareData.title}\n\n${shareData.text}\n\n${shareData.url}`)
        // You might want to show a toast notification here
        alert('Results copied to clipboard!')
      }
    } catch (error) {
      console.error('Error sharing results:', error)
      // Fallback: copy to clipboard
      try {
        await navigator.clipboard.writeText(`${shareData.title}\n\n${shareData.text}\n\n${shareData.url}`)
        alert('Results copied to clipboard!')
      } catch (clipboardError) {
        console.error('Error copying to clipboard:', clipboardError)
        alert('Unable to share results. Please try again.')
      }
    }
  }
  
  const hasResults = results.length > 0
  const latestResult = results[results.length - 1]
  
  // Process actual results or use mock data
  const processedResults = hasResults && latestResult ? {
    totalRounds: latestResult.config.H,
    winner: latestResult.roundResults[0]?.leaderboard[0] ? `${latestResult.roundResults[0].leaderboard[0].label || latestResult.roundResults[0].leaderboard[0].strategy} (${latestResult.roundResults[0].leaderboard[0].id})` : 'Unknown',
    winnerScore: latestResult.roundResults[0]?.leaderboard[0]?.score || 0,
    runnerUp: latestResult.roundResults[0]?.leaderboard[1] ? `${latestResult.roundResults[0].leaderboard[1].label || latestResult.roundResults[0].leaderboard[1].strategy} (${latestResult.roundResults[0].leaderboard[1].id})` : 'Unknown',
    runnerUpScore: latestResult.roundResults[0]?.leaderboard[1]?.score || 0,
    cooperationRate: latestResult.stats.cooperation || 0,
    strategies: latestResult.roundResults[0]?.leaderboard.map((player, index) => ({
      name: `${player.label || player.strategy} (${player.id})`,
      score: player.score,
      cooperation: 0.5 + (Math.random() - 0.5) * 0.4, // Placeholder - should come from detailed stats
      wins: 1,
      id: player.id // Add unique ID to distinguish players
    })) || [],
    roundHistory: Array.from({ length: latestResult.config.H }, (_, i) => ({
      round: i + 1,
      cooperation: 0.6 + 0.3 * Math.sin(i / 10) + (Math.random() - 0.5) * 0.1,
      avgScore: 2.5 + 0.5 * Math.sin(i / 15) + (Math.random() - 0.5) * 0.2
    })),
    matches: latestResult.matches || []
  } : {
    totalRounds: 100,
    winner: 'Tit For Tat',
    winnerScore: 287,
    runnerUp: 'Grudger',
    runnerUpScore: 245,
    cooperationRate: 0.73,
    strategies: [
      { name: 'Tit For Tat', score: 287, cooperation: 0.85, wins: 12 },
      { name: 'Grudger', score: 245, cooperation: 0.68, wins: 8 },
      { name: 'Always Cooperate', score: 198, cooperation: 1.0, wins: 2 },
      { name: 'Joss', score: 176, cooperation: 0.45, wins: 3 },
      { name: 'Always Defect', score: 134, cooperation: 0.0, wins: 1 }
    ],
    roundHistory: Array.from({ length: 100 }, (_, i) => ({
      round: i + 1,
      cooperation: 0.6 + 0.3 * Math.sin(i / 10) + Math.random() * 0.2,
      avgScore: 2.5 + 0.5 * Math.sin(i / 15) + Math.random() * 0.3
    })),
    matches: []
  }

  if (!hasResults) {
    return (
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="flex flex-col items-center justify-center py-20"
      >
        <div className="text-center space-y-4">
          <Activity className="w-16 h-16 text-muted-foreground mx-auto" />
          <h2 className="text-2xl font-semibold text-muted-foreground">No Results Yet</h2>
          <p className="text-muted-foreground max-w-md">
            Run a simulation from the Simulator tab to see detailed results and analytics here.
          </p>
        </div>
      </motion.div>
    )
  }

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="space-y-6"
    >
      {/* Summary Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.1 }}
        >
          <Card className="bg-gradient-to-br from-yellow-50 to-orange-50 dark:from-yellow-950 dark:to-orange-950 border-yellow-200">
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <Trophy className="w-8 h-8 text-yellow-600" />
                <div>
                  <p className="text-sm text-muted-foreground">Winner</p>
                  <p className="text-xl font-bold">{processedResults.winner}</p>
                  <p className="text-sm text-yellow-600">{processedResults.winnerScore} points</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
        >
          <Card className="bg-gradient-to-br from-blue-50 to-cyan-50 dark:from-blue-950 dark:to-cyan-950 border-blue-200">
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <Target className="w-8 h-8 text-blue-600" />
                <div>
                  <p className="text-sm text-muted-foreground">Total Rounds</p>
                  <p className="text-xl font-bold">{processedResults.totalRounds}</p>
                  <p className="text-sm text-blue-600">Completed</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.3 }}
        >
          <Card className="bg-gradient-to-br from-green-50 to-emerald-50 dark:from-green-950 dark:to-emerald-950 border-green-200">
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <TrendingUp className="w-8 h-8 text-green-600" />
                <div>
                  <p className="text-sm text-muted-foreground">Cooperation Rate</p>
                  <p className="text-xl font-bold">{(processedResults.cooperationRate * 100).toFixed(1)}%</p>
                  <Progress value={processedResults.cooperationRate * 100} className="h-2 mt-1" />
                </div>
              </div>
            </CardContent>
          </Card>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.4 }}
        >
          <Card className="bg-gradient-to-br from-purple-50 to-pink-50 dark:from-purple-950 dark:to-pink-950 border-purple-200">
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <Users className="w-8 h-8 text-purple-600" />
                <div>
                  <p className="text-sm text-muted-foreground">Strategies</p>
                  <p className="text-xl font-bold">{processedResults.strategies.length}</p>
                  <p className="text-sm text-purple-600">Competing</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </motion.div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Strategy Performance */}
        <motion.div
          initial={{ opacity: 0, x: -20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ delay: 0.5 }}
        >
          <Card className="shadow-lg">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <BarChart className="w-5 h-5" />
                Strategy Performance
              </CardTitle>
            </CardHeader>
            <CardContent>
              <ResponsiveContainer width="100%" height={300}>
                <BarChart data={processedResults.strategies}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis 
                    dataKey="name" 
                    angle={-45}
                    textAnchor="end"
                    height={80}
                    fontSize={12}
                  />
                  <YAxis />
                  <Tooltip 
                    contentStyle={{ 
                      backgroundColor: 'hsl(var(--card))', 
                      border: '1px solid hsl(var(--border))' 
                    }}
                  />
                  <Bar dataKey="score" fill="#8884d8" radius={[4, 4, 0, 0]} />
                </BarChart>
              </ResponsiveContainer>
            </CardContent>
          </Card>
        </motion.div>

        {/* Cooperation Rates */}
        <motion.div
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ delay: 0.6 }}
        >
          <Card className="shadow-lg">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <PieChart className="w-5 h-5" />
                Cooperation Distribution
              </CardTitle>
            </CardHeader>
            <CardContent>
              <ResponsiveContainer width="100%" height={300}>
                <PieChart>
                  <Pie
                    data={processedResults.strategies}
                    cx="50%"
                    cy="50%"
                    labelLine={false}
                    label={({ name, cooperation }) => `${name}: ${(cooperation * 100).toFixed(0)}%`}
                    outerRadius={80}
                    fill="#8884d8"
                    dataKey="cooperation"
                  >
                    {processedResults.strategies.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                    ))}
                  </Pie>
                  <Tooltip />
                </PieChart>
              </ResponsiveContainer>
            </CardContent>
          </Card>
        </motion.div>
      </div>

      {/* Round-by-Round Analysis */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.7 }}
      >
        <Card className="shadow-lg">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Activity className="w-5 h-5" />
              Round-by-Round Analysis
            </CardTitle>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={400}>
              <LineChart data={processedResults.roundHistory}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="round" />
                <YAxis />
                <Tooltip 
                  contentStyle={{ 
                    backgroundColor: 'hsl(var(--card))', 
                    border: '1px solid hsl(var(--border))' 
                  }}
                />
                <Line 
                  type="monotone" 
                  dataKey="cooperation" 
                  stroke="#8884d8" 
                  strokeWidth={2}
                  name="Cooperation Rate"
                />
                <Line 
                  type="monotone" 
                  dataKey="avgScore" 
                  stroke="#82ca9d" 
                  strokeWidth={2}
                  name="Average Score"
                />
              </LineChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>
      </motion.div>

      {/* Strategy Rankings */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.8 }}
      >
        <Card className="shadow-lg">
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <Trophy className="w-5 h-5" />
                Final Rankings
              </div>
              <div className="flex gap-2">
                <Button variant="outline" size="sm" onClick={exportToCSV}>
                  <Download className="w-4 h-4 mr-2" />
                  Export CSV
                </Button>
                <Button variant="outline" size="sm" onClick={shareResults}>
                  <Share2 className="w-4 h-4 mr-2" />
                  Share Results
                </Button>
              </div>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {processedResults.strategies
                .sort((a, b) => b.score - a.score)
                .map((strategy, index) => (
                  <motion.div
                    key={`${strategy.name}-${index}`}
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: 0.9 + index * 0.1 }}
                    className={`flex items-center justify-between p-4 rounded-lg border-2 ${
                      index === 0 
                        ? 'bg-gradient-to-r from-yellow-50 to-orange-50 border-yellow-300 dark:from-yellow-950 dark:to-orange-950' 
                        : index === 1
                        ? 'bg-gradient-to-r from-gray-50 to-slate-50 border-gray-300 dark:from-gray-950 dark:to-slate-950'
                        : index === 2
                        ? 'bg-gradient-to-r from-orange-50 to-red-50 border-orange-300 dark:from-orange-950 dark:to-red-950'
                        : 'bg-gray-50 border-gray-200 dark:bg-gray-900'
                    }`}
                  >
                    <div className="flex items-center gap-4">
                      <div className={`text-2xl font-bold ${
                        index === 0 ? 'text-yellow-600' : 
                        index === 1 ? 'text-gray-600' :
                        index === 2 ? 'text-orange-600' : 'text-gray-500'
                      }`}>
                        #{index + 1}
                      </div>
                      <div>
                        <h3 className="font-semibold text-lg">{strategy.name}</h3>
                        <div className="flex gap-4 text-sm text-muted-foreground">
                          <span>Score: {strategy.score}</span>
                          <span>Cooperation: {(strategy.cooperation * 100).toFixed(1)}%</span>
                          <span>Wins: {strategy.wins}</span>
                        </div>
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      {index === 0 && <Trophy className="w-6 h-6 text-yellow-600" />}
                      <Badge variant={index < 3 ? "default" : "secondary"}>
                        {strategy.score} pts
                      </Badge>
                    </div>
                  </motion.div>
                ))}
            </div>
          </CardContent>
        </Card>
      </motion.div>
    </motion.div>
  )
}
